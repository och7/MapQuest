import requests
import urllib.parse

def geocoding(location, key):
    """
    Geocodes a given location using the GraphHopper API.

    Parameters:
        location (str): The location to geocode.
        key (str): The API key for authentication.

    Returns:
        tuple: A tuple containing the status code, latitude, longitude, and formatted location name.
    """
    while location.strip() == "":
        location = input("Enter the location again: ").strip()

    geocode_url = "https://graphhopper.com/api/1/geocode?"
    url = geocode_url + urllib.parse.urlencode({"q": location, "limit": "1", "key": key})

    try:
        replydata = requests.get(url)
        json_status = replydata.status_code

        if json_status == 200 and len(replydata.json().get("hits", [])) != 0:
            json_data = replydata.json()
            lat = json_data["hits"][0]["point"]["lat"]
            lng = json_data["hits"][0]["point"]["lng"]
            name = json_data["hits"][0]["name"]
            value = json_data["hits"][0]["osm_value"]

            country = json_data["hits"][0].get("country", "")
            state = json_data["hits"][0].get("state", "")

            if state and country:
                new_loc = f"{name}, {state}, {country}"
            elif state:
                new_loc = f"{name}, {state}"
            elif country:
                new_loc = f"{name}, {country}"
            else:
                new_loc = name

            print(f"Geocoding API URL for {new_loc} (Location Type: {value})\n{url}")
            return json_status, lat, lng, new_loc

        else:
            print("Error: No results found for the location. Please try again.")
            return json_status, "null", "null", location

    except Exception as e:
        if replydata.status_code != 200:
            try:
                print("Geocode API status: " + str(replydata.status_code) +
                      "\nError message: " + replydata.json()["message"])
            except KeyError:
                print("Error: Unable to retrieve error message from response.")
        else:
            print(f"An unexpected error occurred: {e}")
        return "error", "null", "null", location


# Routing API Implementation
key = "144ad730-2e10-4220-a559-ad8f34d6604b"  # Replace with your valid API key
route_url = "https://graphhopper.com/api/1/route?"

while True:
    # Add vehicle profile selection
    print("\n+++++++++++++++++++++++++++++++++++++++++++++")
    print("Vehicle profiles available on Graphhopper:")
    print("+++++++++++++++++++++++++++++++++++++++++++++")
    print("car, bike, foot")
    print("+++++++++++++++++++++++++++++++++++++++++++++")
    profile = ["car", "bike", "foot"]
    
    # User selects the vehicle mode
    vehicle = input("Enter a vehicle profile from the list above: ")
    if vehicle == "quit" or vehicle == "q":
        print("Exiting the program. Goodbye!")
        break
    elif vehicle in profile:
        vehicle = vehicle
    else:
        vehicle = "car"  # Default to car if input is invalid
        print("No valid vehicle profile was entered. Using the car profile.")

    # Input for the starting and destination locations
    loc1 = input("Starting Location: ").strip()
    if loc1.lower() in ["quit", "q"]:
        print("Exiting the program. Goodbye!")
        break
    orig = geocoding(loc1, key)

    loc2 = input("Destination: ").strip()
    if loc2.lower() in ["quit", "q"]:
        print("Exiting the program. Goodbye!")
        break
    dest = geocoding(loc2, key)

    print("=================================================")

    # Construct routing URL with vehicle profile
    if orig[0] == 200 and dest[0] == 200:
        op = "&point=" + str(orig[1]) + "%2C" + str(orig[2])
        dp = "&point=" + str(dest[1]) + "%2C" + str(dest[2])
        
        # Add vehicle parameter to the routing URL
        paths_url = route_url + urllib.parse.urlencode({"key": key, "vehicle": vehicle}) + op + dp

        paths_response = requests.get(paths_url)
        paths_status = paths_response.status_code
        paths_data = paths_response.json()

        print(f"Routing API Status: {paths_status}")
        print(f"Routing API URL:\n{paths_url}")

        if paths_status == 200:
            try:
                distance = paths_data["paths"][0]["distance"]
                time = paths_data["paths"][0]["time"]
                hr, rem = divmod(time // 1000, 3600)
                min, sec = divmod(rem, 60)

                # Display distance and time
                print(f"Directions from {orig[3]} to {dest[3]} by {vehicle}")
                print("=================================================")
                print(f"Distance Traveled: {distance / 1609.34:.2f} miles / {distance / 1000:.2f} km")
                print(f"Trip Duration: {hr:02d}:{min:02d}:{sec:02d}")
                print("=================================================")

                # Iterate through the instructions and display each step
                for each in range(len(paths_data["paths"][0]["instructions"])):
                    path = paths_data["paths"][0]["instructions"][each]["text"]
                    instr_distance = paths_data["paths"][0]["instructions"][each]["distance"]
                    print("{0} ( {1:.1f} km / {2:.1f} miles )".format(
                        path, instr_distance / 1000, instr_distance / 1609.34))
                print("=================================================")

            except (KeyError, IndexError) as e:
                print("Error: Unable to extract routing details.")
        else:
            print("Error: Unable to retrieve routing information. Please check the details and try again.")
    else:
        print("Error: Could not retrieve geocoding data for one or both locations.")
